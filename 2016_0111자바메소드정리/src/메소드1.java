/*
 * 	메소드 구성요소
 * 		=> 결과값(리턴형)
 * 		=> 입력값(사용자) => 매개변수
 * 		: 메소드 안에서 사용하는 변수
 * 		* 사용자 입력값
 * 		* 다른 메소드로 전송
 * 		=====> 전체에서 사용하는 변수(멤버변수)
 * 		변수)
 * 			멤버변수 : 프로그램 종료시에 사라진다.
 * 			= instance 변수
 * 			  저장이 따로 된다.	(객체변수)
 * 			= static 변수
 * 			 저장 공간이 1개이다. 변경하면 다른 쪽에서도 변경됨(공유변수)
 * 			지역변수
 * 			= {}안에서만 사용되는 변수
 *   => 형식)
 *   	=================
 *   	      리턴형        매개변수
 *      =================
 *     		O      O
 *      =================
 *    		O      X
 *      =================
 *    		X      O      =====> 리턴형이 없는 경우에는 void
 *      =================
 *   		X      X
 *   
 *   	1) 리턴형 o, 매개변수o
 *   	   String substring(int s,int e)
 *   	2) 리턴형 o, 매개변수x
 *   	   double random()
 *   	3) 리턴형 x, 매개변수o
 *   	   void print(String s)
 *   	4) 리턴형 x, 매개변수x
 *   	   void actionPerformd()
 *   
 *   	=> 형식)
 *   		선언부 => 인터페이스(어떤 기능을 설정할 것이다라고 제시), 추상클래스 => 요구사항 분석할 때 많이 나옴
 *   		구현부
 *   		String substing(int s,int e) 선언부
 *   		{
 *   			구현부
 *   		}
 *   		* 선언부만 있을 수 있다.(예시. 버튼 - 항상 프로그램마다 다를 수 있기 때문에 구현은 새로 해야함. 
 *   							 그래서 선언만 해서 넘김(;))
 *		=> String클래스
 *			사용법
 *			String s = 값
 *			====== == 변수
 *			데이터형(사용자 정의)
 *			
 *			같은 값을 새로운 메모리에 저장 : new
 *			String s1=new String("aaa");
 *			String s2=new String("aaa");
 *			String s3=new String("aaa");
 *			String s4=new String("aaa");
 *			String s5=new String("aaa");
 *			String s6="aaa";
 *			String s7="aaa";
 *			// s1~5까지는 모두 다른 주소값을 가지고 있음. 그러나 6,7은 같음!
 *
 *			=> 주요기능
 *			1) substring
 *			2) indexOf, lastIndexOf
 *			3) startsWith, endWith
 *			4) trim
 *			5) length
 *			6) split
 *			7) valueOf
 *			8) replace, replaceAll
 *			9) charAt
 *==============================================================================
 *		이차원배열 : 일차원배열 여러개를 모아서 관리
 *		형식)
 *			데이터형[행][열] 배열명;
 *			데이터형 배열명[행][열];
 *			데이터형[행] 배열명[열];
 *	
 *			행: 줄수, 사람 갯수 => 일차 for문
 *			열: 데이터 갯수 => 이차 for문
 *
 *		예) 
 *			5명의 학생
 *			국어, 영어, 수학, 총점, 평균, 학점
 *			[5][6] => 5행 6열 , 5명이 6개의 데이터
 *				
 *			s[5][5]
 *				0    1    2    3    4
 *			==============================	
 *			0	10   20   30   40   50
 *			 s[0][0]			   s[0][4] => 앞에가 줄수, 뒤가 데이터갯수
 *			==============================
 *			1	60	 70   80   90   100
 *			 s[2][0]	
 *			==============================
 *			2	110  120  130  140  150
 *			==============================
 *			3	160  170  180  190  200
 *			==============================
 *			4	210  220  230  240  250
 *			==============================
 *
 *		================================
 *		1
 *		================================
 *		2	3
 *		=================================
 *		4	5	7
 *		================================
 *		7	8	9	10
 *		===============================
 *		11	12	13	14	15
 *		================================
 *
 *		int [][] arr=new int[5][5];
 *		줄수 (행) 데이터 (열)
 *		  0		0-0
 *		  1		0-1
 *		  2		0-2
 *		  3		0-3
 *		  4		0-4
 *		int k=1;
 *		for(int i=0;i<5;i++)
 *		{
 *			for(int j=0;j<=i;j++)
 *			{
 *				arr[i][j]=k;
 *				k++;
 *			}
 *		}
 *
 *		====================
 *			   			1
 *		====================
 *					2	3
 *		====================
 *				4	5	7
 *		====================
 *			7	8	9	10
 *		====================
 *		11	12	13	14	15
 *		====================
 *
 *		줄수 (행) 데이터 (열)
 *		  0		4-4
 *		  1		3-4
 *		  2		2-4
 *		  3		1-4
 *		  4		0-4
 *		i+j=4 ==> j=4-i
 *		
 *		int [][] arr=new int[5][5];
 *		int k=1;
 *		for(int i=0;i<5;i++)
 *		{
 *			for(int j=4-i;j<=4;j++)
 *			{
 *				arr[i][j]=k;
 *				k++;
 *			}
 *		}
 *
 *	    ====================
 *		 1	 2	 3	 4	 5
 *		====================
 *			 6	 7	 8	 9
 *		====================
 *				10	 11  12
 *		====================
 *					 13  14
 *		====================
 *						 15
 *		====================
 *
 *		줄수 (행) 데이터 (열)
 *		  0		0-4
 *		  1		1-4
 *		  2		2-4
 *		  3		3-4
 *		  4		4-4
 *
 *		int [][] arr=new int[5][5];
 *		int k=1;
 *		for(int i=0;i<5;i++)
 *		{
 *			for(int j=i;j<=4;j++)
 *			{
 *				arr[i][j]=k;
 *				k++;
 *			}
 *		}
 */
public class 메소드1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			int[][] arr=new int[5][5];
			int k=1;
			for(int i=0;i<5;i++)
			{
				for(int j=0;j<=i;j++)
				{
					arr[i][j]=k;
					k++;
				}
			}
			//출력
			for(int i=0;i<5;i++)
			{
				for(int j=0;j<5;j++)
				{
					if(arr[i][j]==0)
						System.out.print("\t");
					else
						System.out.print(arr[i][j]+"\t");
				}
				//줄간격
				System.out.println();
			}
		}
}
	


















